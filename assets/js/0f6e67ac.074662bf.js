"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[849],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return g}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=u(t),g=i,f=p["".concat(o,".").concat(g)]||p[g]||l[g]||s;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=p;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var u=2;u<s;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6626:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var r=t(7462),i=t(3366),s=(t(7294),t(3905)),a=["components"],c={},o="Send & Receive messages",u={unversionedId:"SendReceiveMessage",id:"SendReceiveMessage",title:"Send & Receive messages",description:"Courier library provides the functionality of sending & receiving messages through both service interface and MqttClient.",source:"@site/docs/SendReceiveMessage.md",sourceDirName:".",slug:"/SendReceiveMessage",permalink:"/courier-android/docs/SendReceiveMessage",draft:!1,editUrl:"https://github.com/gojek/courier-android/edit/main/docs/docs/SendReceiveMessage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Subscribe & Unsubscribe topics",permalink:"/courier-android/docs/SubscribeUnsubscribe"},next:{title:"Message & Stream Adapters",permalink:"/courier-android/docs/MessageStreamAdapters"}},d={},l=[{value:"Send/Receive using Service Interface",id:"sendreceive-using-service-interface",level:2},{value:"Send/Receive using MqttClient",id:"sendreceive-using-mqttclient",level:2}],p={toc:l};function g(e){var n=e.components,t=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"send--receive-messages"},"Send & Receive messages"),(0,s.kt)("p",null,"Courier library provides the functionality of sending & receiving messages through both service interface and MqttClient."),(0,s.kt)("h2",{id:"sendreceive-using-service-interface"},"Send/Receive using Service Interface"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'interface MessageService {\n    @Receive(topic = "topic/{id}/receive")\n    fun receive(@Path("id") identifier: String): Observable<Message>\n    \n    @Send(topic = "topic/{id}/send", qos = QoS.TWO)\n    fun send(@Path("id") identifier: String, @Data message: Message)\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'messageService.send("user-id", message)\n\nmessageService.receive("user-id") { message ->\n    print(message)\n}\n')),(0,s.kt)("h2",{id:"sendreceive-using-mqttclient"},"Send/Receive using MqttClient"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"mqttClient.send(message, topic, QoS.TWO)\n\nmqttClient.addMessageListener(topic, object : MessageListener {\n    override fun onMessageReceived(mqttMessage: MqttMessage) {\n        print(mqttMessage)\n    }\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note")," : Only messages for those topics can be received through receive api, which are already subscribed"))}g.isMDXComponent=!0}}]);